2022-05-13 00:05:36,666   INFO  **********************Start logging**********************
2022-05-13 00:05:36,666   INFO  CUDA_VISIBLE_DEVICES=2,3
2022-05-13 00:05:36,667   INFO  total_batch_size: 8
2022-05-13 00:05:36,667   INFO  cfg_file         tools/cfgs/kitti_models/MVXNet_PGD.yaml
2022-05-13 00:05:36,667   INFO  batch_size       4
2022-05-13 00:05:36,667   INFO  epochs           80
2022-05-13 00:05:36,667   INFO  workers          4
2022-05-13 00:05:36,668   INFO  extra_tag        default
2022-05-13 00:05:36,668   INFO  ckpt             None
2022-05-13 00:05:36,668   INFO  pretrained_model None
2022-05-13 00:05:36,668   INFO  launcher         pytorch
2022-05-13 00:05:36,668   INFO  tcp_port         18888
2022-05-13 00:05:36,669   INFO  sync_bn          False
2022-05-13 00:05:36,669   INFO  fix_random_seed  False
2022-05-13 00:05:36,669   INFO  ckpt_save_interval 1
2022-05-13 00:05:36,669   INFO  local_rank       0
2022-05-13 00:05:36,669   INFO  max_ckpt_save_num 30
2022-05-13 00:05:36,669   INFO  merge_all_iters_to_one_epoch False
2022-05-13 00:05:36,670   INFO  set_cfgs         None
2022-05-13 00:05:36,670   INFO  max_waiting_mins 0
2022-05-13 00:05:36,670   INFO  start_epoch      0
2022-05-13 00:05:36,670   INFO  num_epochs_to_eval 0
2022-05-13 00:05:36,670   INFO  save_to_file     False
2022-05-13 00:05:36,671   INFO  cfg.ROOT_DIR: /mnt/sda1/kypark/fusion_openpcdet2/fusion_openpcdet
2022-05-13 00:05:36,671   INFO  cfg.LOCAL_RANK: 0
2022-05-13 00:05:36,671   INFO  cfg.CLASS_NAMES: ['Car', 'Pedestrian', 'Cyclist']
2022-05-13 00:05:36,671   INFO  
cfg.DATA_CONFIG = edict()
2022-05-13 00:05:36,671   INFO  cfg.DATA_CONFIG.DATASET: FusionKittiDataset_PGD
2022-05-13 00:05:36,672   INFO  cfg.DATA_CONFIG.DATA_PATH: /mnt/sda1/kypark/fusion_openpcdet2/fusion_openpcdet/data/kitti
2022-05-13 00:05:36,672   INFO  cfg.DATA_CONFIG.POINT_CLOUD_RANGE: [0, -40, -3, 70.4, 40, 1]
2022-05-13 00:05:36,672   INFO  
cfg.DATA_CONFIG.DATA_SPLIT = edict()
2022-05-13 00:05:36,672   INFO  cfg.DATA_CONFIG.DATA_SPLIT.train: train
2022-05-13 00:05:36,672   INFO  cfg.DATA_CONFIG.DATA_SPLIT.test: val
2022-05-13 00:05:36,673   INFO  
cfg.DATA_CONFIG.INFO_PATH = edict()
2022-05-13 00:05:36,673   INFO  cfg.DATA_CONFIG.INFO_PATH.train: ['kitti_infos_train.pkl']
2022-05-13 00:05:36,673   INFO  cfg.DATA_CONFIG.INFO_PATH.test: ['kitti_infos_val.pkl']
2022-05-13 00:05:36,673   INFO  cfg.DATA_CONFIG.GET_ITEM_LIST: ['images', 'points', 'calib_matricies', 'gt_boxes2d']
2022-05-13 00:05:36,673   INFO  cfg.DATA_CONFIG.FOV_POINTS_ONLY: True
2022-05-13 00:05:36,673   INFO  
cfg.DATA_CONFIG.DATA_AUGMENTOR = edict()
2022-05-13 00:05:36,674   INFO  cfg.DATA_CONFIG.DATA_AUGMENTOR.DISABLE_AUG_LIST: ['placeholder']
2022-05-13 00:05:36,674   INFO  cfg.DATA_CONFIG.DATA_AUGMENTOR.AUG_CONFIG_LIST: [{'NAME': 'resize', 'resize_cfg': {'img_scale': [[640, 192], [2560, 768]], 'multiscale_mode': 'range', 'keep_ratio': True}}, {'NAME': 'random_world_rotation', 'WORLD_ROT_ANGLE': [-0.78539816, 0.78539816]}, {'NAME': 'random_world_scaling', 'WORLD_SCALE_RANGE': [0.95, 1.05]}, {'NAME': 'random_world_translation', 'NOISE_TRANSLATE_STD': [0.2, 0.2, 0.2], 'ALONG_AXIS_LIST': ['xyz']}, {'NAME': 'random_world_flip', 'ALONG_AXIS_LIST': ['x']}, {'NAME': 'normalize', 'img_norm_cfg': {'mean': [103.53, 116.28, 123.675], 'std': [1.0, 1.0, 1.0], 'to_rgb': False}}, {'NAME': 'gt_sampling', 'USE_ROAD_PLANE': True, 'DB_INFO_PATH': ['kitti_dbinfos_train.pkl'], 'PREPARE': {'filter_by_min_points': ['Car:5', 'Pedestrian:5', 'Cyclist:5'], 'filter_by_difficulty': [-1]}, 'SAMPLE_GROUPS': ['Car:20', 'Pedestrian:15', 'Cyclist:15'], 'NUM_POINT_FEATURES': 4, 'DATABASE_WITH_FAKELIDAR': False, 'REMOVE_EXTRA_WIDTH': [0.0, 0.0, 0.0], 'LIMIT_WHOLE_SCENE': True}]
2022-05-13 00:05:36,674   INFO  
cfg.DATA_CONFIG.POINT_FEATURE_ENCODING = edict()
2022-05-13 00:05:36,674   INFO  cfg.DATA_CONFIG.POINT_FEATURE_ENCODING.encoding_type: absolute_coordinates_encoding
2022-05-13 00:05:36,675   INFO  cfg.DATA_CONFIG.POINT_FEATURE_ENCODING.used_feature_list: ['x', 'y', 'z', 'intensity']
2022-05-13 00:05:36,675   INFO  cfg.DATA_CONFIG.POINT_FEATURE_ENCODING.src_feature_list: ['x', 'y', 'z', 'intensity']
2022-05-13 00:05:36,675   INFO  cfg.DATA_CONFIG.DATA_PROCESSOR: [{'NAME': 'mask_points_and_boxes_outside_range', 'REMOVE_OUTSIDE_BOXES': True}, {'NAME': 'shuffle_points', 'SHUFFLE_ENABLED': {'train': True, 'test': False}}, {'NAME': 'transform_points_to_voxels', 'VOXEL_SIZE': [0.05, 0.05, 0.1], 'MAX_POINTS_PER_VOXEL': 5, 'MAX_NUMBER_OF_VOXELS': {'train': 16000, 'test': 40000}}]
2022-05-13 00:05:36,675   INFO  cfg.DATA_CONFIG._BASE_CONFIG_: /mnt/sda1/kypark/fusion_openpcdet2/fusion_openpcdet/tools/cfgs/dataset_configs/fusionkitti_dataset.yaml
2022-05-13 00:05:36,675   INFO  
cfg.MODEL = edict()
2022-05-13 00:05:36,676   INFO  cfg.MODEL.NAME: MVXNet_PGD
2022-05-13 00:05:36,676   INFO  
cfg.MODEL.IMGEXTRACTION = edict()
2022-05-13 00:05:36,676   INFO  cfg.MODEL.IMGEXTRACTION.NAME: ImgExtraction
2022-05-13 00:05:36,676   INFO  cfg.MODEL.IMGEXTRACTION.BACKBONE_NAME: ResNet
2022-05-13 00:05:36,676   INFO  
cfg.MODEL.IMGEXTRACTION.BACKBONE_ARGS = edict()
2022-05-13 00:05:36,677   INFO  cfg.MODEL.IMGEXTRACTION.BACKBONE_ARGS.depth: 50
2022-05-13 00:05:36,677   INFO  cfg.MODEL.IMGEXTRACTION.BACKBONE_ARGS.num_stages: 4
2022-05-13 00:05:36,677   INFO  cfg.MODEL.IMGEXTRACTION.BACKBONE_ARGS.out_indices: [0, 1, 2, 3]
2022-05-13 00:05:36,677   INFO  cfg.MODEL.IMGEXTRACTION.BACKBONE_ARGS.frozen_stages: 1
2022-05-13 00:05:36,677   INFO  
cfg.MODEL.IMGEXTRACTION.BACKBONE_ARGS.norm_cfg = edict()
2022-05-13 00:05:36,677   INFO  cfg.MODEL.IMGEXTRACTION.BACKBONE_ARGS.norm_cfg.type: BN
2022-05-13 00:05:36,678   INFO  cfg.MODEL.IMGEXTRACTION.BACKBONE_ARGS.norm_cfg.requires_grad: False
2022-05-13 00:05:36,678   INFO  cfg.MODEL.IMGEXTRACTION.BACKBONE_ARGS.norm_eval: True
2022-05-13 00:05:36,678   INFO  cfg.MODEL.IMGEXTRACTION.BACKBONE_ARGS.style: caffe
2022-05-13 00:05:36,678   INFO  
cfg.MODEL.IMGEXTRACTION.BACKBONE_ARGS.init_cfg = edict()
2022-05-13 00:05:36,678   INFO  cfg.MODEL.IMGEXTRACTION.BACKBONE_ARGS.init_cfg.type: Pretrained
2022-05-13 00:05:36,678   INFO  cfg.MODEL.IMGEXTRACTION.BACKBONE_ARGS.init_cfg.checkpoint: /mnt/sda1/kypark/fusion_openpcdet2/fusion_openpcdet/ckpt/resnet.pth
2022-05-13 00:05:36,678   INFO  
cfg.MODEL.IMGEXTRACTION.NECK_ARGS = edict()
2022-05-13 00:05:36,678   INFO  cfg.MODEL.IMGEXTRACTION.NECK_ARGS.in_channels: [256, 512, 1024, 2048]
2022-05-13 00:05:36,679   INFO  cfg.MODEL.IMGEXTRACTION.NECK_ARGS.out_channels: 256
2022-05-13 00:05:36,679   INFO  cfg.MODEL.IMGEXTRACTION.NECK_ARGS.num_outs: 5
2022-05-13 00:05:36,679   INFO  
cfg.MODEL.IMGEXTRACTION.NECK_ARGS.init_cfg = edict()
2022-05-13 00:05:36,679   INFO  cfg.MODEL.IMGEXTRACTION.NECK_ARGS.init_cfg.type: Pretrained
2022-05-13 00:05:36,679   INFO  cfg.MODEL.IMGEXTRACTION.NECK_ARGS.init_cfg.checkpoint: /mnt/sda1/kypark/fusion_openpcdet2/fusion_openpcdet/ckpt/fpn.pth
2022-05-13 00:05:36,679   INFO  
cfg.MODEL.VFE = edict()
2022-05-13 00:05:36,679   INFO  cfg.MODEL.VFE.NAME: DynamicVFE
2022-05-13 00:05:36,679   INFO  cfg.MODEL.VFE.IN_CHANNELS: 4
2022-05-13 00:05:36,679   INFO  cfg.MODEL.VFE.OUT_CHANNELS: 128
2022-05-13 00:05:36,680   INFO  cfg.MODEL.VFE.FEAT_CHANNELS: [64, 64]
2022-05-13 00:05:36,680   INFO  cfg.MODEL.VFE.WITH_DISTANCE: False
2022-05-13 00:05:36,680   INFO  cfg.MODEL.VFE.WITH_CLUSTER_CENTER: True
2022-05-13 00:05:36,680   INFO  cfg.MODEL.VFE.WITH_VOXEL_CENTER: True
2022-05-13 00:05:36,680   INFO  
cfg.MODEL.VFE.FUSION_LAYER_CONFIG = edict()
2022-05-13 00:05:36,680   INFO  cfg.MODEL.VFE.FUSION_LAYER_CONFIG.img_channels: 256
2022-05-13 00:05:36,680   INFO  cfg.MODEL.VFE.FUSION_LAYER_CONFIG.pts_channels: 64
2022-05-13 00:05:36,680   INFO  cfg.MODEL.VFE.FUSION_LAYER_CONFIG.mid_channels: 128
2022-05-13 00:05:36,680   INFO  cfg.MODEL.VFE.FUSION_LAYER_CONFIG.out_channels: 128
2022-05-13 00:05:36,681   INFO  cfg.MODEL.VFE.FUSION_LAYER_CONFIG.img_levels: [0, 1, 2, 3, 4]
2022-05-13 00:05:36,681   INFO  cfg.MODEL.VFE.FUSION_LAYER_CONFIG.align_corners: False
2022-05-13 00:05:36,681   INFO  cfg.MODEL.VFE.FUSION_LAYER_CONFIG.activate_out: True
2022-05-13 00:05:36,681   INFO  cfg.MODEL.VFE.FUSION_LAYER_CONFIG.fuse_out: False
2022-05-13 00:05:36,681   INFO  
cfg.MODEL.BACKBONE_3D = edict()
2022-05-13 00:05:36,681   INFO  cfg.MODEL.BACKBONE_3D.NAME: VoxelBackBone8x
2022-05-13 00:05:36,681   INFO  
cfg.MODEL.MAP_TO_BEV = edict()
2022-05-13 00:05:36,681   INFO  cfg.MODEL.MAP_TO_BEV.NAME: HeightCompression
2022-05-13 00:05:36,682   INFO  cfg.MODEL.MAP_TO_BEV.NUM_BEV_FEATURES: 256
2022-05-13 00:05:36,682   INFO  
cfg.MODEL.BACKBONE_2D = edict()
2022-05-13 00:05:36,682   INFO  cfg.MODEL.BACKBONE_2D.NAME: BaseBEVBackbone
2022-05-13 00:05:36,682   INFO  cfg.MODEL.BACKBONE_2D.LAYER_NUMS: [5, 5]
2022-05-13 00:05:36,682   INFO  cfg.MODEL.BACKBONE_2D.LAYER_STRIDES: [1, 2]
2022-05-13 00:05:36,682   INFO  cfg.MODEL.BACKBONE_2D.NUM_FILTERS: [128, 256]
2022-05-13 00:05:36,682   INFO  cfg.MODEL.BACKBONE_2D.UPSAMPLE_STRIDES: [1, 2]
2022-05-13 00:05:36,682   INFO  cfg.MODEL.BACKBONE_2D.NUM_UPSAMPLE_FILTERS: [256, 256]
2022-05-13 00:05:36,682   INFO  
cfg.MODEL.DENSE_HEAD = edict()
2022-05-13 00:05:36,683   INFO  cfg.MODEL.DENSE_HEAD.NAME: AnchorHeadSingle
2022-05-13 00:05:36,683   INFO  cfg.MODEL.DENSE_HEAD.CLASS_AGNOSTIC: False
2022-05-13 00:05:36,683   INFO  cfg.MODEL.DENSE_HEAD.USE_DIRECTION_CLASSIFIER: True
2022-05-13 00:05:36,683   INFO  cfg.MODEL.DENSE_HEAD.DIR_OFFSET: 0.78539
2022-05-13 00:05:36,683   INFO  cfg.MODEL.DENSE_HEAD.DIR_LIMIT_OFFSET: 0.0
2022-05-13 00:05:36,683   INFO  cfg.MODEL.DENSE_HEAD.NUM_DIR_BINS: 2
2022-05-13 00:05:36,683   INFO  cfg.MODEL.DENSE_HEAD.ANCHOR_GENERATOR_CONFIG: [{'class_name': 'Car', 'anchor_sizes': [[3.9, 1.6, 1.56]], 'anchor_rotations': [0, 1.57], 'anchor_bottom_heights': [-1.78], 'align_center': False, 'feature_map_stride': 8, 'matched_threshold': 0.6, 'unmatched_threshold': 0.45}, {'class_name': 'Pedestrian', 'anchor_sizes': [[0.8, 0.6, 1.73]], 'anchor_rotations': [0, 1.57], 'anchor_bottom_heights': [-0.6], 'align_center': False, 'feature_map_stride': 8, 'matched_threshold': 0.5, 'unmatched_threshold': 0.35}, {'class_name': 'Cyclist', 'anchor_sizes': [[1.76, 0.6, 1.73]], 'anchor_rotations': [0, 1.57], 'anchor_bottom_heights': [-0.6], 'align_center': False, 'feature_map_stride': 8, 'matched_threshold': 0.5, 'unmatched_threshold': 0.35}]
2022-05-13 00:05:36,683   INFO  
cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG = edict()
2022-05-13 00:05:36,684   INFO  cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG.NAME: AxisAlignedTargetAssigner
2022-05-13 00:05:36,684   INFO  cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG.POS_FRACTION: -1.0
2022-05-13 00:05:36,684   INFO  cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG.SAMPLE_SIZE: 512
2022-05-13 00:05:36,684   INFO  cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG.NORM_BY_NUM_EXAMPLES: False
2022-05-13 00:05:36,684   INFO  cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG.MATCH_HEIGHT: False
2022-05-13 00:05:36,684   INFO  cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG.BOX_CODER: ResidualCoder
2022-05-13 00:05:36,684   INFO  
cfg.MODEL.DENSE_HEAD.LOSS_CONFIG = edict()
2022-05-13 00:05:36,684   INFO  
cfg.MODEL.DENSE_HEAD.LOSS_CONFIG.LOSS_WEIGHTS = edict()
2022-05-13 00:05:36,684   INFO  cfg.MODEL.DENSE_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.cls_weight: 1.0
2022-05-13 00:05:36,685   INFO  cfg.MODEL.DENSE_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.loc_weight: 2.0
2022-05-13 00:05:36,685   INFO  cfg.MODEL.DENSE_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.dir_weight: 0.2
2022-05-13 00:05:36,685   INFO  cfg.MODEL.DENSE_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.code_weights: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
2022-05-13 00:05:36,685   INFO  
cfg.MODEL.POST_PROCESSING = edict()
2022-05-13 00:05:36,685   INFO  cfg.MODEL.POST_PROCESSING.RECALL_THRESH_LIST: [0.3, 0.5, 0.7]
2022-05-13 00:05:36,685   INFO  cfg.MODEL.POST_PROCESSING.SCORE_THRESH: 0.1
2022-05-13 00:05:36,685   INFO  cfg.MODEL.POST_PROCESSING.OUTPUT_RAW_SCORE: False
2022-05-13 00:05:36,685   INFO  cfg.MODEL.POST_PROCESSING.EVAL_METRIC: kitti
2022-05-13 00:05:36,686   INFO  
cfg.MODEL.POST_PROCESSING.NMS_CONFIG = edict()
2022-05-13 00:05:36,686   INFO  cfg.MODEL.POST_PROCESSING.NMS_CONFIG.MULTI_CLASSES_NMS: False
2022-05-13 00:05:36,686   INFO  cfg.MODEL.POST_PROCESSING.NMS_CONFIG.NMS_TYPE: nms_gpu
2022-05-13 00:05:36,686   INFO  cfg.MODEL.POST_PROCESSING.NMS_CONFIG.NMS_THRESH: 0.01
2022-05-13 00:05:36,686   INFO  cfg.MODEL.POST_PROCESSING.NMS_CONFIG.NMS_PRE_MAXSIZE: 4096
2022-05-13 00:05:36,686   INFO  cfg.MODEL.POST_PROCESSING.NMS_CONFIG.NMS_POST_MAXSIZE: 500
2022-05-13 00:05:36,686   INFO  
cfg.OPTIMIZATION = edict()
2022-05-13 00:05:36,686   INFO  cfg.OPTIMIZATION.BATCH_SIZE_PER_GPU: 4
2022-05-13 00:05:36,686   INFO  cfg.OPTIMIZATION.NUM_EPOCHS: 80
2022-05-13 00:05:36,687   INFO  cfg.OPTIMIZATION.OPTIMIZER: adam_onecycle
2022-05-13 00:05:36,687   INFO  cfg.OPTIMIZATION.LR: 0.003
2022-05-13 00:05:36,687   INFO  cfg.OPTIMIZATION.WEIGHT_DECAY: 0.01
2022-05-13 00:05:36,687   INFO  cfg.OPTIMIZATION.MOMENTUM: 0.9
2022-05-13 00:05:36,687   INFO  cfg.OPTIMIZATION.MOMS: [0.95, 0.99]
2022-05-13 00:05:36,687   INFO  cfg.OPTIMIZATION.PCT_START: 0.4
2022-05-13 00:05:36,687   INFO  cfg.OPTIMIZATION.DIV_FACTOR: 10
2022-05-13 00:05:36,687   INFO  cfg.OPTIMIZATION.DECAY_STEP_LIST: [35, 45]
2022-05-13 00:05:36,687   INFO  cfg.OPTIMIZATION.LR_DECAY: 0.1
2022-05-13 00:05:36,688   INFO  cfg.OPTIMIZATION.LR_CLIP: 1e-07
2022-05-13 00:05:36,688   INFO  cfg.OPTIMIZATION.LR_WARMUP: False
2022-05-13 00:05:36,688   INFO  cfg.OPTIMIZATION.WARMUP_EPOCH: 1
2022-05-13 00:05:36,688   INFO  cfg.OPTIMIZATION.GRAD_NORM_CLIP: 35
2022-05-13 00:05:36,688   INFO  cfg.TAG: MVXNet_PGD
2022-05-13 00:05:36,688   INFO  cfg.EXP_GROUP_PATH: cfgs/kitti_models
2022-05-13 00:05:37,152   INFO  Database filter by min points Car: 14357 => 13532
2022-05-13 00:05:37,153   INFO  Database filter by min points Pedestrian: 2207 => 2168
2022-05-13 00:05:37,154   INFO  Database filter by min points Cyclist: 734 => 705
2022-05-13 00:05:37,194   INFO  Database filter by difficulty Car: 13532 => 10759
2022-05-13 00:05:37,200   INFO  Database filter by difficulty Pedestrian: 2168 => 2075
2022-05-13 00:05:37,203   INFO  Database filter by difficulty Cyclist: 705 => 581
2022-05-13 00:05:37,213   INFO  Loading KITTI dataset
2022-05-13 00:05:37,366   INFO  Total samples for KITTI dataset: 3712
2022-05-13 00:05:42,522   INFO  DistributedDataParallel(
  (module): MVXNet_PGD(
    (imgextraction): ImgExtraction(
      (model): ResNet(
        (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
        (layer1): ResLayer(
          (0): Bottleneck(
            (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (downsample): Sequential(
              (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
          )
        )
        (layer2): ResLayer(
          (0): Bottleneck(
            (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (downsample): Sequential(
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
          )
        )
        (layer3): ResLayer(
          (0): Bottleneck(
            (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (downsample): Sequential(
              (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
          )
          (4): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
          )
          (5): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
          )
        )
        (layer4): ResLayer(
          (0): Bottleneck(
            (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (downsample): Sequential(
              (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
          )
        )
      )
      init_cfg={'type': 'Pretrained', 'checkpoint': '/mnt/sda1/kypark/fusion_openpcdet2/fusion_openpcdet/ckpt/resnet.pth'}
      (neck): FPN(
        (lateral_convs): ModuleList(
          (0): ConvModule(
            (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
          )
          (1): ConvModule(
            (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          )
          (2): ConvModule(
            (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          )
          (3): ConvModule(
            (conv): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          )
        )
        (fpn_convs): ModuleList(
          (0): ConvModule(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (1): ConvModule(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (2): ConvModule(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (3): ConvModule(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
      )
      init_cfg={'type': 'Pretrained', 'checkpoint': '/mnt/sda1/kypark/fusion_openpcdet2/fusion_openpcdet/ckpt/fpn.pth'}
    )
    (vfe): DynamicVFE(
      (voxelization): Voxelization(voxel_size=[0.05, 0.05, 0.1], point_cloud_range=[  0.  -40.   -3.   70.4  40.    1. ], max_num_points=-1, max_voxels=(-1, -1), deterministic=True)
      (cluster_scatter): DynamicScatter(voxel_size=[0.05, 0.05, 0.1], point_cloud_range=[  0.  -40.   -3.   70.4  40.    1. ], average_points=True)
      (vfe_layers): ModuleList(
        (0): Sequential(
          (0): Linear(in_features=10, out_features=64, bias=False)
          (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (1): Sequential(
          (0): Linear(in_features=128, out_features=64, bias=False)
          (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
      )
      (vfe_scatter): DynamicScatter(voxel_size=[0.05, 0.05, 0.1], point_cloud_range=[  0.  -40.   -3.   70.4  40.    1. ], average_points=False)
      (fusion_layer): PointFusion(
        (lateral_convs): ModuleList(
          (0): ConvModule(
            (conv): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (1): ConvModule(
            (conv): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (2): ConvModule(
            (conv): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (3): ConvModule(
            (conv): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (4): ConvModule(
            (conv): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (img_transform): Sequential(
          (0): Linear(in_features=640, out_features=128, bias=True)
          (1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        )
        (pts_transform): Sequential(
          (0): Linear(in_features=64, out_features=128, bias=True)
          (1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        )
      )
    )
    (backbone_3d): VoxelBackBone8x(
      (conv_input): SparseSequential(
        (0): SubMConv3d(128, 16, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
        (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
      (conv1): SparseSequential(
        (0): SparseSequential(
          (0): SubMConv3d(16, 16, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU()
        )
      )
      (conv2): SparseSequential(
        (0): SparseSequential(
          (0): SparseConv3d(16, 32, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (1): SparseSequential(
          (0): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (2): SparseSequential(
          (0): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU()
        )
      )
      (conv3): SparseSequential(
        (0): SparseSequential(
          (0): SparseConv3d(32, 64, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (1): SparseSequential(
          (0): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (2): SparseSequential(
          (0): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU()
        )
      )
      (conv4): SparseSequential(
        (0): SparseSequential(
          (0): SparseConv3d(64, 64, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[0, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (1): SparseSequential(
          (0): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (2): SparseSequential(
          (0): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU()
        )
      )
      (conv_out): SparseSequential(
        (0): SparseConv3d(64, 128, kernel_size=[3, 1, 1], stride=[2, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
        (1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
    )
    (map_to_bev_module): HeightCompression()
    (pfe): None
    (backbone_2d): BaseBEVBackbone(
      (blocks): ModuleList(
        (0): Sequential(
          (0): ZeroPad2d(padding=(1, 1, 1, 1), value=0.0)
          (1): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), bias=False)
          (2): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (3): ReLU()
          (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (5): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (6): ReLU()
          (7): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (8): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (9): ReLU()
          (10): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (11): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (12): ReLU()
          (13): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (14): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (15): ReLU()
          (16): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (17): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (18): ReLU()
        )
        (1): Sequential(
          (0): ZeroPad2d(padding=(1, 1, 1, 1), value=0.0)
          (1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (2): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (3): ReLU()
          (4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (5): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (6): ReLU()
          (7): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (8): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (9): ReLU()
          (10): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (11): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (12): ReLU()
          (13): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (14): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (15): ReLU()
          (16): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (17): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (18): ReLU()
        )
      )
      (deblocks): ModuleList(
        (0): Sequential(
          (0): ConvTranspose2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (1): Sequential(
          (0): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2), bias=False)
          (1): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU()
        )
      )
    )
    (dense_head): AnchorHeadSingle(
      (cls_loss_func): SigmoidFocalClassificationLoss()
      (reg_loss_func): WeightedSmoothL1Loss()
      (dir_loss_func): WeightedCrossEntropyLoss()
      (conv_cls): Conv2d(512, 18, kernel_size=(1, 1), stride=(1, 1))
      (conv_box): Conv2d(512, 42, kernel_size=(1, 1), stride=(1, 1))
      (conv_dir_cls): Conv2d(512, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (point_head): None
    (roi_head): None
    (dense_head_3d): None
  )
)
2022-05-13 00:05:42,533   INFO  **********************Start training cfgs/kitti_models/MVXNet_PGD(default)**********************
2022-05-13 12:56:39,022   INFO  **********************End training cfgs/kitti_models/MVXNet_PGD(default)**********************



2022-05-13 12:56:39,034   INFO  **********************Start evaluation cfgs/kitti_models/MVXNet_PGD(default)**********************
2022-05-13 12:56:39,043   INFO  Loading KITTI dataset
2022-05-13 12:56:39,236   INFO  Total samples for KITTI dataset: 3769
2022-05-13 12:56:39,242   INFO  ==> Loading parameters from checkpoint /mnt/sda1/kypark/fusion_openpcdet2/fusion_openpcdet/output/cfgs/kitti_models/MVXNet_PGD/default/ckpt/checkpoint_epoch_80.pth to CPU
2022-05-13 12:56:39,556   INFO  ==> Checkpoint trained from version: pcdet+0.5.2+96bf30c+py8565f36
2022-05-13 12:56:39,662   INFO  ==> Done (loaded 533/533)
2022-05-13 12:56:39,672   INFO  *************** EPOCH 80 EVALUATION *****************
2022-05-13 13:01:15,129   INFO  *************** Performance of EPOCH 80 *****************
2022-05-13 13:01:15,130   INFO  Generate label finished(sec_per_example: 0.0731 second).
2022-05-13 13:01:15,130   INFO  recall_roi_0.3: 0.000000
2022-05-13 13:01:15,130   INFO  recall_rcnn_0.3: 0.945216
2022-05-13 13:01:15,130   INFO  recall_roi_0.5: 0.000000
2022-05-13 13:01:15,130   INFO  recall_rcnn_0.5: 0.887585
2022-05-13 13:01:15,130   INFO  recall_roi_0.7: 0.000000
2022-05-13 13:01:15,130   INFO  recall_rcnn_0.7: 0.647551
2022-05-13 13:01:15,132   INFO  Average predicted number of objects(3769 samples): 11.078
2022-05-13 13:02:13,260   INFO  Car AP@0.70, 0.70, 0.70:
bbox AP:90.6331, 89.3421, 88.5271
bev  AP:89.6793, 86.9987, 85.5624
3d   AP:87.7470, 77.4750, 76.0202
aos  AP:90.62, 89.18, 88.28
Car AP_R40@0.70, 0.70, 0.70:
bbox AP:95.7569, 92.0147, 91.2594
bev  AP:92.2821, 87.8613, 87.0320
3d   AP:89.5297, 80.0419, 75.9557
aos  AP:95.74, 91.83, 90.99
Car AP@0.70, 0.50, 0.50:
bbox AP:90.6331, 89.3421, 88.5271
bev  AP:90.6464, 89.6225, 89.0119
3d   AP:90.6464, 89.5617, 88.8876
aos  AP:90.62, 89.18, 88.28
Car AP_R40@0.70, 0.50, 0.50:
bbox AP:95.7569, 92.0147, 91.2594
bev  AP:95.8222, 94.4149, 93.9405
3d   AP:95.8058, 94.2588, 93.5998
aos  AP:95.74, 91.83, 90.99
Pedestrian AP@0.50, 0.50, 0.50:
bbox AP:70.2455, 66.5000, 64.2427
bev  AP:66.3261, 62.9363, 58.2838
3d   AP:61.3208, 56.4820, 52.2746
aos  AP:65.13, 61.01, 58.59
Pedestrian AP_R40@0.50, 0.50, 0.50:
bbox AP:70.3799, 66.6063, 63.9980
bev  AP:67.0726, 62.6485, 58.4561
3d   AP:60.6442, 55.5625, 51.2904
aos  AP:64.58, 60.55, 57.80
Pedestrian AP@0.50, 0.25, 0.25:
bbox AP:70.2455, 66.5000, 64.2427
bev  AP:78.6491, 76.1490, 73.7113
3d   AP:78.5356, 75.9026, 73.4502
aos  AP:65.13, 61.01, 58.59
Pedestrian AP_R40@0.50, 0.25, 0.25:
bbox AP:70.3799, 66.6063, 63.9980
bev  AP:80.5422, 77.5828, 74.4907
3d   AP:80.4283, 77.2151, 74.2777
aos  AP:64.58, 60.55, 57.80
Cyclist AP@0.50, 0.50, 0.50:
bbox AP:87.0456, 69.8102, 66.5037
bev  AP:84.9207, 64.5936, 62.5882
3d   AP:81.4136, 62.6847, 59.0049
aos  AP:86.85, 68.78, 65.40
Cyclist AP_R40@0.50, 0.50, 0.50:
bbox AP:90.0140, 70.8973, 67.3088
bev  AP:86.8874, 66.2113, 61.5833
3d   AP:82.9691, 62.5631, 58.1528
aos  AP:89.82, 69.72, 66.13
Cyclist AP@0.50, 0.25, 0.25:
bbox AP:87.0456, 69.8102, 66.5037
bev  AP:87.0995, 69.9329, 65.3665
3d   AP:87.0995, 69.9329, 65.3665
aos  AP:86.85, 68.78, 65.40
Cyclist AP_R40@0.50, 0.25, 0.25:
bbox AP:90.0140, 70.8973, 67.3088
bev  AP:89.2458, 70.8441, 66.2614
3d   AP:89.2458, 70.8441, 66.2614
aos  AP:89.82, 69.72, 66.13

2022-05-13 13:02:13,267   INFO  Result is save to /mnt/sda1/kypark/fusion_openpcdet2/fusion_openpcdet/output/cfgs/kitti_models/MVXNet_PGD/default/eval/eval_with_train/epoch_80/val
2022-05-13 13:02:13,267   INFO  ****************Evaluation done.*****************
2022-05-13 13:02:13,313   INFO  Epoch 80 has been evaluated
2022-05-13 13:02:43,348   INFO  **********************End evaluation cfgs/kitti_models/MVXNet_PGD(default)**********************
