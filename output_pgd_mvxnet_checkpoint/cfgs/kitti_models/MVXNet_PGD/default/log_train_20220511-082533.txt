2022-05-11 08:25:33,490   INFO  **********************Start logging**********************
2022-05-11 08:25:33,490   INFO  CUDA_VISIBLE_DEVICES=0,1
2022-05-11 08:25:33,491   INFO  total_batch_size: 12
2022-05-11 08:25:33,491   INFO  cfg_file         tools/cfgs/kitti_models/MVXNet_PGD.yaml
2022-05-11 08:25:33,491   INFO  batch_size       6
2022-05-11 08:25:33,491   INFO  epochs           80
2022-05-11 08:25:33,492   INFO  workers          4
2022-05-11 08:25:33,492   INFO  extra_tag        default
2022-05-11 08:25:33,492   INFO  ckpt             None
2022-05-11 08:25:33,492   INFO  pretrained_model None
2022-05-11 08:25:33,493   INFO  launcher         pytorch
2022-05-11 08:25:33,493   INFO  tcp_port         18888
2022-05-11 08:25:33,493   INFO  sync_bn          False
2022-05-11 08:25:33,493   INFO  fix_random_seed  False
2022-05-11 08:25:33,493   INFO  ckpt_save_interval 1
2022-05-11 08:25:33,494   INFO  local_rank       0
2022-05-11 08:25:33,494   INFO  max_ckpt_save_num 30
2022-05-11 08:25:33,494   INFO  merge_all_iters_to_one_epoch False
2022-05-11 08:25:33,494   INFO  set_cfgs         None
2022-05-11 08:25:33,494   INFO  max_waiting_mins 0
2022-05-11 08:25:33,495   INFO  start_epoch      0
2022-05-11 08:25:33,495   INFO  num_epochs_to_eval 0
2022-05-11 08:25:33,495   INFO  save_to_file     False
2022-05-11 08:25:33,495   INFO  cfg.ROOT_DIR: /mnt/sda1/kypark/fusion_openpcdet
2022-05-11 08:25:33,496   INFO  cfg.LOCAL_RANK: 0
2022-05-11 08:25:33,496   INFO  cfg.CLASS_NAMES: ['Car', 'Pedestrian', 'Cyclist']
2022-05-11 08:25:33,496   INFO  
cfg.DATA_CONFIG = edict()
2022-05-11 08:25:33,496   INFO  cfg.DATA_CONFIG.DATASET: FusionKittiDataset_PGD
2022-05-11 08:25:33,496   INFO  cfg.DATA_CONFIG.DATA_PATH: /mnt/sda1/kypark/fusion_openpcdet/data/kitti
2022-05-11 08:25:33,497   INFO  cfg.DATA_CONFIG.POINT_CLOUD_RANGE: [0, -40, -3, 70.4, 40, 1]
2022-05-11 08:25:33,497   INFO  
cfg.DATA_CONFIG.DATA_SPLIT = edict()
2022-05-11 08:25:33,497   INFO  cfg.DATA_CONFIG.DATA_SPLIT.train: train
2022-05-11 08:25:33,497   INFO  cfg.DATA_CONFIG.DATA_SPLIT.test: val
2022-05-11 08:25:33,498   INFO  
cfg.DATA_CONFIG.INFO_PATH = edict()
2022-05-11 08:25:33,498   INFO  cfg.DATA_CONFIG.INFO_PATH.train: ['kitti_infos_train.pkl']
2022-05-11 08:25:33,498   INFO  cfg.DATA_CONFIG.INFO_PATH.test: ['kitti_infos_val.pkl']
2022-05-11 08:25:33,498   INFO  cfg.DATA_CONFIG.GET_ITEM_LIST: ['images', 'points', 'calib_matricies', 'gt_boxes2d']
2022-05-11 08:25:33,498   INFO  cfg.DATA_CONFIG.FOV_POINTS_ONLY: True
2022-05-11 08:25:33,499   INFO  
cfg.DATA_CONFIG.DATA_AUGMENTOR = edict()
2022-05-11 08:25:33,499   INFO  cfg.DATA_CONFIG.DATA_AUGMENTOR.DISABLE_AUG_LIST: ['placeholder']
2022-05-11 08:25:33,499   INFO  cfg.DATA_CONFIG.DATA_AUGMENTOR.AUG_CONFIG_LIST: [{'NAME': 'resize', 'resize_cfg': {'img_scale': [[1242, 375]], 'multiscale_mode': 'range', 'keep_ratio': True}}, {'NAME': 'random_world_rotation', 'WORLD_ROT_ANGLE': [-0.78539816, 0.78539816]}, {'NAME': 'random_world_scaling', 'WORLD_SCALE_RANGE': [0.95, 1.05]}, {'NAME': 'random_world_translation', 'NOISE_TRANSLATE_STD': [0.2, 0.2, 0.2], 'ALONG_AXIS_LIST': ['xyz']}, {'NAME': 'random_world_flip', 'ALONG_AXIS_LIST': ['x']}, {'NAME': 'normalize', 'img_norm_cfg': {'mean': [103.53, 116.28, 123.675], 'std': [1.0, 1.0, 1.0], 'to_rgb': False}}]
2022-05-11 08:25:33,499   INFO  
cfg.DATA_CONFIG.POINT_FEATURE_ENCODING = edict()
2022-05-11 08:25:33,500   INFO  cfg.DATA_CONFIG.POINT_FEATURE_ENCODING.encoding_type: absolute_coordinates_encoding
2022-05-11 08:25:33,500   INFO  cfg.DATA_CONFIG.POINT_FEATURE_ENCODING.used_feature_list: ['x', 'y', 'z', 'intensity']
2022-05-11 08:25:33,500   INFO  cfg.DATA_CONFIG.POINT_FEATURE_ENCODING.src_feature_list: ['x', 'y', 'z', 'intensity']
2022-05-11 08:25:33,500   INFO  cfg.DATA_CONFIG.DATA_PROCESSOR: [{'NAME': 'mask_points_and_boxes_outside_range', 'REMOVE_OUTSIDE_BOXES': True}, {'NAME': 'shuffle_points', 'SHUFFLE_ENABLED': {'train': True, 'test': False}}, {'NAME': 'transform_points_to_voxels', 'VOXEL_SIZE': [0.05, 0.05, 0.1], 'MAX_POINTS_PER_VOXEL': 5, 'MAX_NUMBER_OF_VOXELS': {'train': 16000, 'test': 40000}}]
2022-05-11 08:25:33,501   INFO  cfg.DATA_CONFIG._BASE_CONFIG_: /mnt/sda1/kypark/fusion_openpcdet/tools/cfgs/dataset_configs/fusionkitti_dataset.yaml
2022-05-11 08:25:33,501   INFO  
cfg.MODEL = edict()
2022-05-11 08:25:33,501   INFO  cfg.MODEL.NAME: MVXNet_PGD
2022-05-11 08:25:33,501   INFO  
cfg.MODEL.IMGEXTRACTION = edict()
2022-05-11 08:25:33,502   INFO  cfg.MODEL.IMGEXTRACTION.NAME: ImgExtraction
2022-05-11 08:25:33,502   INFO  cfg.MODEL.IMGEXTRACTION.BACKBONE_NAME: ResNet
2022-05-11 08:25:33,502   INFO  
cfg.MODEL.IMGEXTRACTION.BACKBONE_ARGS = edict()
2022-05-11 08:25:33,502   INFO  cfg.MODEL.IMGEXTRACTION.BACKBONE_ARGS.depth: 50
2022-05-11 08:25:33,502   INFO  cfg.MODEL.IMGEXTRACTION.BACKBONE_ARGS.num_stages: 4
2022-05-11 08:25:33,503   INFO  cfg.MODEL.IMGEXTRACTION.BACKBONE_ARGS.out_indices: [0, 1, 2, 3]
2022-05-11 08:25:33,503   INFO  cfg.MODEL.IMGEXTRACTION.BACKBONE_ARGS.frozen_stages: 1
2022-05-11 08:25:33,503   INFO  
cfg.MODEL.IMGEXTRACTION.BACKBONE_ARGS.norm_cfg = edict()
2022-05-11 08:25:33,503   INFO  cfg.MODEL.IMGEXTRACTION.BACKBONE_ARGS.norm_cfg.type: BN
2022-05-11 08:25:33,503   INFO  cfg.MODEL.IMGEXTRACTION.BACKBONE_ARGS.norm_cfg.requires_grad: False
2022-05-11 08:25:33,503   INFO  cfg.MODEL.IMGEXTRACTION.BACKBONE_ARGS.norm_eval: True
2022-05-11 08:25:33,503   INFO  cfg.MODEL.IMGEXTRACTION.BACKBONE_ARGS.style: caffe
2022-05-11 08:25:33,503   INFO  
cfg.MODEL.IMGEXTRACTION.BACKBONE_ARGS.init_cfg = edict()
2022-05-11 08:25:33,504   INFO  cfg.MODEL.IMGEXTRACTION.BACKBONE_ARGS.init_cfg.type: Pretrained
2022-05-11 08:25:33,504   INFO  cfg.MODEL.IMGEXTRACTION.BACKBONE_ARGS.init_cfg.checkpoint: /mnt/sda1/kypark/fusion_openpcdet/ckpt/resnet.pth
2022-05-11 08:25:33,504   INFO  
cfg.MODEL.IMGEXTRACTION.NECK_ARGS = edict()
2022-05-11 08:25:33,504   INFO  cfg.MODEL.IMGEXTRACTION.NECK_ARGS.in_channels: [256, 512, 1024, 2048]
2022-05-11 08:25:33,504   INFO  cfg.MODEL.IMGEXTRACTION.NECK_ARGS.out_channels: 256
2022-05-11 08:25:33,504   INFO  cfg.MODEL.IMGEXTRACTION.NECK_ARGS.num_outs: 5
2022-05-11 08:25:33,504   INFO  
cfg.MODEL.IMGEXTRACTION.NECK_ARGS.init_cfg = edict()
2022-05-11 08:25:33,505   INFO  cfg.MODEL.IMGEXTRACTION.NECK_ARGS.init_cfg.type: Pretrained
2022-05-11 08:25:33,505   INFO  cfg.MODEL.IMGEXTRACTION.NECK_ARGS.init_cfg.checkpoint: /mnt/sda1/kypark/fusion_openpcdet/ckpt/fpn.pth
2022-05-11 08:25:33,505   INFO  
cfg.MODEL.VFE = edict()
2022-05-11 08:25:33,505   INFO  cfg.MODEL.VFE.NAME: DynamicVFE
2022-05-11 08:25:33,505   INFO  cfg.MODEL.VFE.IN_CHANNELS: 4
2022-05-11 08:25:33,505   INFO  cfg.MODEL.VFE.OUT_CHANNELS: 128
2022-05-11 08:25:33,505   INFO  cfg.MODEL.VFE.FEAT_CHANNELS: [64, 64]
2022-05-11 08:25:33,506   INFO  cfg.MODEL.VFE.WITH_DISTANCE: False
2022-05-11 08:25:33,506   INFO  cfg.MODEL.VFE.WITH_CLUSTER_CENTER: True
2022-05-11 08:25:33,506   INFO  cfg.MODEL.VFE.WITH_VOXEL_CENTER: True
2022-05-11 08:25:33,506   INFO  
cfg.MODEL.VFE.FUSION_LAYER_CONFIG = edict()
2022-05-11 08:25:33,506   INFO  cfg.MODEL.VFE.FUSION_LAYER_CONFIG.img_channels: 256
2022-05-11 08:25:33,506   INFO  cfg.MODEL.VFE.FUSION_LAYER_CONFIG.pts_channels: 64
2022-05-11 08:25:33,506   INFO  cfg.MODEL.VFE.FUSION_LAYER_CONFIG.mid_channels: 128
2022-05-11 08:25:33,507   INFO  cfg.MODEL.VFE.FUSION_LAYER_CONFIG.out_channels: 128
2022-05-11 08:25:33,507   INFO  cfg.MODEL.VFE.FUSION_LAYER_CONFIG.img_levels: [0, 1, 2, 3, 4]
2022-05-11 08:25:33,507   INFO  cfg.MODEL.VFE.FUSION_LAYER_CONFIG.align_corners: False
2022-05-11 08:25:33,507   INFO  cfg.MODEL.VFE.FUSION_LAYER_CONFIG.activate_out: True
2022-05-11 08:25:33,507   INFO  cfg.MODEL.VFE.FUSION_LAYER_CONFIG.fuse_out: False
2022-05-11 08:25:33,507   INFO  
cfg.MODEL.BACKBONE_3D = edict()
2022-05-11 08:25:33,507   INFO  cfg.MODEL.BACKBONE_3D.NAME: VoxelBackBone8x
2022-05-11 08:25:33,507   INFO  
cfg.MODEL.MAP_TO_BEV = edict()
2022-05-11 08:25:33,508   INFO  cfg.MODEL.MAP_TO_BEV.NAME: HeightCompression
2022-05-11 08:25:33,508   INFO  cfg.MODEL.MAP_TO_BEV.NUM_BEV_FEATURES: 256
2022-05-11 08:25:33,508   INFO  
cfg.MODEL.BACKBONE_2D = edict()
2022-05-11 08:25:33,508   INFO  cfg.MODEL.BACKBONE_2D.NAME: BaseBEVBackbone
2022-05-11 08:25:33,508   INFO  cfg.MODEL.BACKBONE_2D.LAYER_NUMS: [5, 5]
2022-05-11 08:25:33,508   INFO  cfg.MODEL.BACKBONE_2D.LAYER_STRIDES: [1, 2]
2022-05-11 08:25:33,508   INFO  cfg.MODEL.BACKBONE_2D.NUM_FILTERS: [128, 256]
2022-05-11 08:25:33,509   INFO  cfg.MODEL.BACKBONE_2D.UPSAMPLE_STRIDES: [1, 2]
2022-05-11 08:25:33,509   INFO  cfg.MODEL.BACKBONE_2D.NUM_UPSAMPLE_FILTERS: [256, 256]
2022-05-11 08:25:33,509   INFO  
cfg.MODEL.DENSE_HEAD_3D = edict()
2022-05-11 08:25:33,509   INFO  cfg.MODEL.DENSE_HEAD_3D.NAME: MMDet3DHead
2022-05-11 08:25:33,509   INFO  
cfg.MODEL.DENSE_HEAD_3D.cfg = edict()
2022-05-11 08:25:33,509   INFO  cfg.MODEL.DENSE_HEAD_3D.cfg.type: PGDHead
2022-05-11 08:25:33,509   INFO  cfg.MODEL.DENSE_HEAD_3D.cfg.num_classes: 3
2022-05-11 08:25:33,510   INFO  cfg.MODEL.DENSE_HEAD_3D.cfg.in_channels: 256
2022-05-11 08:25:33,510   INFO  cfg.MODEL.DENSE_HEAD_3D.cfg.stacked_convs: 2
2022-05-11 08:25:33,510   INFO  cfg.MODEL.DENSE_HEAD_3D.cfg.feat_channels: 256
2022-05-11 08:25:33,510   INFO  cfg.MODEL.DENSE_HEAD_3D.cfg.use_direction_classifier: True
2022-05-11 08:25:33,510   INFO  cfg.MODEL.DENSE_HEAD_3D.cfg.diff_rad_by_sin: True
2022-05-11 08:25:33,510   INFO  cfg.MODEL.DENSE_HEAD_3D.cfg.pred_keypoints: True
2022-05-11 08:25:33,510   INFO  cfg.MODEL.DENSE_HEAD_3D.cfg.dir_offset: 0.7854
2022-05-11 08:25:33,510   INFO  cfg.MODEL.DENSE_HEAD_3D.cfg.cls_branch: [256]
2022-05-11 08:25:33,511   INFO  cfg.MODEL.DENSE_HEAD_3D.cfg.dir_branch: [256]
2022-05-11 08:25:33,511   INFO  cfg.MODEL.DENSE_HEAD_3D.cfg.attr_branch: [256]
2022-05-11 08:25:33,511   INFO  cfg.MODEL.DENSE_HEAD_3D.cfg.norm_on_bbox: True
2022-05-11 08:25:33,511   INFO  cfg.MODEL.DENSE_HEAD_3D.cfg.centerness_on_reg: True
2022-05-11 08:25:33,511   INFO  cfg.MODEL.DENSE_HEAD_3D.cfg.center_sampling: True
2022-05-11 08:25:33,511   INFO  cfg.MODEL.DENSE_HEAD_3D.cfg.conv_bias: True
2022-05-11 08:25:33,511   INFO  cfg.MODEL.DENSE_HEAD_3D.cfg.dcn_on_last_conv: True
2022-05-11 08:25:33,512   INFO  cfg.MODEL.DENSE_HEAD_3D.cfg.bbox_code_size: 7
2022-05-11 08:25:33,512   INFO  cfg.MODEL.DENSE_HEAD_3D.cfg.pred_attrs: False
2022-05-11 08:25:33,512   INFO  cfg.MODEL.DENSE_HEAD_3D.cfg.pred_velo: False
2022-05-11 08:25:33,512   INFO  cfg.MODEL.DENSE_HEAD_3D.cfg.pred_bbox2d: True
2022-05-11 08:25:33,512   INFO  cfg.MODEL.DENSE_HEAD_3D.cfg.use_onlyreg_proj: True
2022-05-11 08:25:33,512   INFO  cfg.MODEL.DENSE_HEAD_3D.cfg.strides: [4, 8, 16, 32]
2022-05-11 08:25:33,512   INFO  cfg.MODEL.DENSE_HEAD_3D.cfg.regress_ranges: [[-1, 64], [64, 128], [128, 256], [256, 8e-08]]
2022-05-11 08:25:33,512   INFO  cfg.MODEL.DENSE_HEAD_3D.cfg.group_reg_dims: [2, 1, 3, 1, 16, 4]
2022-05-11 08:25:33,512   INFO  cfg.MODEL.DENSE_HEAD_3D.cfg.reg_branch: [[256], [256], [256], [256], [256], [256]]
2022-05-11 08:25:33,513   INFO  cfg.MODEL.DENSE_HEAD_3D.cfg.centerness_branch: [256]
2022-05-11 08:25:33,513   INFO  
cfg.MODEL.DENSE_HEAD_3D.cfg.loss_cls = edict()
2022-05-11 08:25:33,513   INFO  cfg.MODEL.DENSE_HEAD_3D.cfg.loss_cls.type: FocalLoss
2022-05-11 08:25:33,513   INFO  cfg.MODEL.DENSE_HEAD_3D.cfg.loss_cls.use_sigmoid: True
2022-05-11 08:25:33,513   INFO  cfg.MODEL.DENSE_HEAD_3D.cfg.loss_cls.gamma: 2.0
2022-05-11 08:25:33,513   INFO  cfg.MODEL.DENSE_HEAD_3D.cfg.loss_cls.alpha: 0.25
2022-05-11 08:25:33,513   INFO  cfg.MODEL.DENSE_HEAD_3D.cfg.loss_cls.loss_weight: 1.0
2022-05-11 08:25:33,513   INFO  
cfg.MODEL.DENSE_HEAD_3D.cfg.loss_bbox = edict()
2022-05-11 08:25:33,513   INFO  cfg.MODEL.DENSE_HEAD_3D.cfg.loss_bbox.type: SmoothL1Loss
2022-05-11 08:25:33,513   INFO  cfg.MODEL.DENSE_HEAD_3D.cfg.loss_bbox.beta: 0.111111
2022-05-11 08:25:33,513   INFO  cfg.MODEL.DENSE_HEAD_3D.cfg.loss_bbox.loss_weight: 1.0
2022-05-11 08:25:33,514   INFO  
cfg.MODEL.DENSE_HEAD_3D.cfg.loss_dir = edict()
2022-05-11 08:25:33,514   INFO  cfg.MODEL.DENSE_HEAD_3D.cfg.loss_dir.type: CrossEntropyLoss
2022-05-11 08:25:33,514   INFO  cfg.MODEL.DENSE_HEAD_3D.cfg.loss_dir.use_sigmoid: False
2022-05-11 08:25:33,514   INFO  cfg.MODEL.DENSE_HEAD_3D.cfg.loss_dir.loss_weight: 1.0
2022-05-11 08:25:33,514   INFO  
cfg.MODEL.DENSE_HEAD_3D.cfg.loss_centerness = edict()
2022-05-11 08:25:33,514   INFO  cfg.MODEL.DENSE_HEAD_3D.cfg.loss_centerness.type: CrossEntropyLoss
2022-05-11 08:25:33,514   INFO  cfg.MODEL.DENSE_HEAD_3D.cfg.loss_centerness.use_sigmoid: True
2022-05-11 08:25:33,514   INFO  cfg.MODEL.DENSE_HEAD_3D.cfg.loss_centerness.loss_weight: 1.0
2022-05-11 08:25:33,514   INFO  cfg.MODEL.DENSE_HEAD_3D.cfg.use_depth_classifier: True
2022-05-11 08:25:33,514   INFO  cfg.MODEL.DENSE_HEAD_3D.cfg.depth_branch: [256]
2022-05-11 08:25:33,514   INFO  cfg.MODEL.DENSE_HEAD_3D.cfg.depth_range: [0, 70]
2022-05-11 08:25:33,515   INFO  cfg.MODEL.DENSE_HEAD_3D.cfg.depth_unit: 10
2022-05-11 08:25:33,515   INFO  cfg.MODEL.DENSE_HEAD_3D.cfg.division: uniform
2022-05-11 08:25:33,515   INFO  cfg.MODEL.DENSE_HEAD_3D.cfg.depth_bins: 8
2022-05-11 08:25:33,515   INFO  cfg.MODEL.DENSE_HEAD_3D.cfg.weight_dim: 1
2022-05-11 08:25:33,515   INFO  
cfg.MODEL.DENSE_HEAD_3D.cfg.loss_depth = edict()
2022-05-11 08:25:33,515   INFO  cfg.MODEL.DENSE_HEAD_3D.cfg.loss_depth.type: UncertainSmoothL1Loss
2022-05-11 08:25:33,515   INFO  cfg.MODEL.DENSE_HEAD_3D.cfg.loss_depth.alpha: 1.0
2022-05-11 08:25:33,515   INFO  cfg.MODEL.DENSE_HEAD_3D.cfg.loss_depth.beta: 3.0
2022-05-11 08:25:33,515   INFO  cfg.MODEL.DENSE_HEAD_3D.cfg.loss_depth.loss_weight: 1.0
2022-05-11 08:25:33,515   INFO  
cfg.MODEL.DENSE_HEAD_3D.cfg.bbox_coder = edict()
2022-05-11 08:25:33,515   INFO  cfg.MODEL.DENSE_HEAD_3D.cfg.bbox_coder.type: PGDBBoxCoder
2022-05-11 08:25:33,516   INFO  cfg.MODEL.DENSE_HEAD_3D.cfg.bbox_coder.base_depths: [[28.01, 16.32]]
2022-05-11 08:25:33,516   INFO  cfg.MODEL.DENSE_HEAD_3D.cfg.bbox_coder.base_dims: [[0.8, 1.73, 0.6], [1.76, 1.73, 0.6], [3.9, 1.56, 1.6]]
2022-05-11 08:25:33,516   INFO  cfg.MODEL.DENSE_HEAD_3D.cfg.bbox_coder.code_size: 7
2022-05-11 08:25:33,516   INFO  
cfg.MODEL.DENSE_HEAD_3D.cfg.train_cfg = edict()
2022-05-11 08:25:33,516   INFO  cfg.MODEL.DENSE_HEAD_3D.cfg.train_cfg.code_weight: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 1.0, 1.0, 1.0, 1.0]
2022-05-11 08:25:33,516   INFO  
cfg.MODEL.DENSE_HEAD_3D.cfg.test_cfg = edict()
2022-05-11 08:25:33,516   INFO  cfg.MODEL.DENSE_HEAD_3D.cfg.test_cfg.nms_pre: 1000
2022-05-11 08:25:33,516   INFO  cfg.MODEL.DENSE_HEAD_3D.cfg.test_cfg.nms_thr: 0.05
2022-05-11 08:25:33,516   INFO  cfg.MODEL.DENSE_HEAD_3D.cfg.test_cfg.score_thr: 0.001
2022-05-11 08:25:33,516   INFO  cfg.MODEL.DENSE_HEAD_3D.cfg.test_cfg.max_per_img: 20
2022-05-11 08:25:33,516   INFO  
cfg.MODEL.DENSE_HEAD = edict()
2022-05-11 08:25:33,517   INFO  cfg.MODEL.DENSE_HEAD.NAME: AnchorHeadSingle
2022-05-11 08:25:33,517   INFO  cfg.MODEL.DENSE_HEAD.CLASS_AGNOSTIC: False
2022-05-11 08:25:33,517   INFO  cfg.MODEL.DENSE_HEAD.USE_DIRECTION_CLASSIFIER: True
2022-05-11 08:25:33,517   INFO  cfg.MODEL.DENSE_HEAD.DIR_OFFSET: 0.78539
2022-05-11 08:25:33,517   INFO  cfg.MODEL.DENSE_HEAD.DIR_LIMIT_OFFSET: 0.0
2022-05-11 08:25:33,517   INFO  cfg.MODEL.DENSE_HEAD.NUM_DIR_BINS: 2
2022-05-11 08:25:33,517   INFO  cfg.MODEL.DENSE_HEAD.ANCHOR_GENERATOR_CONFIG: [{'class_name': 'Car', 'anchor_sizes': [[3.9, 1.6, 1.56]], 'anchor_rotations': [0, 1.57], 'anchor_bottom_heights': [-1.78], 'align_center': False, 'feature_map_stride': 8, 'matched_threshold': 0.6, 'unmatched_threshold': 0.45}, {'class_name': 'Pedestrian', 'anchor_sizes': [[0.8, 0.6, 1.73]], 'anchor_rotations': [0, 1.57], 'anchor_bottom_heights': [-0.6], 'align_center': False, 'feature_map_stride': 8, 'matched_threshold': 0.5, 'unmatched_threshold': 0.35}, {'class_name': 'Cyclist', 'anchor_sizes': [[1.76, 0.6, 1.73]], 'anchor_rotations': [0, 1.57], 'anchor_bottom_heights': [-0.6], 'align_center': False, 'feature_map_stride': 8, 'matched_threshold': 0.5, 'unmatched_threshold': 0.35}]
2022-05-11 08:25:33,517   INFO  
cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG = edict()
2022-05-11 08:25:33,517   INFO  cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG.NAME: AxisAlignedTargetAssigner
2022-05-11 08:25:33,517   INFO  cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG.POS_FRACTION: -1.0
2022-05-11 08:25:33,518   INFO  cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG.SAMPLE_SIZE: 512
2022-05-11 08:25:33,518   INFO  cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG.NORM_BY_NUM_EXAMPLES: False
2022-05-11 08:25:33,518   INFO  cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG.MATCH_HEIGHT: False
2022-05-11 08:25:33,518   INFO  cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG.BOX_CODER: ResidualCoder
2022-05-11 08:25:33,518   INFO  
cfg.MODEL.DENSE_HEAD.LOSS_CONFIG = edict()
2022-05-11 08:25:33,518   INFO  
cfg.MODEL.DENSE_HEAD.LOSS_CONFIG.LOSS_WEIGHTS = edict()
2022-05-11 08:25:33,518   INFO  cfg.MODEL.DENSE_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.cls_weight: 1.0
2022-05-11 08:25:33,518   INFO  cfg.MODEL.DENSE_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.loc_weight: 2.0
2022-05-11 08:25:33,518   INFO  cfg.MODEL.DENSE_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.dir_weight: 0.2
2022-05-11 08:25:33,518   INFO  cfg.MODEL.DENSE_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.code_weights: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
2022-05-11 08:25:33,518   INFO  
cfg.MODEL.POST_PROCESSING = edict()
2022-05-11 08:25:33,519   INFO  cfg.MODEL.POST_PROCESSING.RECALL_THRESH_LIST: [0.3, 0.5, 0.7]
2022-05-11 08:25:33,519   INFO  cfg.MODEL.POST_PROCESSING.SCORE_THRESH: 0.1
2022-05-11 08:25:33,519   INFO  cfg.MODEL.POST_PROCESSING.OUTPUT_RAW_SCORE: False
2022-05-11 08:25:33,519   INFO  cfg.MODEL.POST_PROCESSING.EVAL_METRIC: kitti
2022-05-11 08:25:33,519   INFO  
cfg.MODEL.POST_PROCESSING.NMS_CONFIG = edict()
2022-05-11 08:25:33,519   INFO  cfg.MODEL.POST_PROCESSING.NMS_CONFIG.MULTI_CLASSES_NMS: False
2022-05-11 08:25:33,519   INFO  cfg.MODEL.POST_PROCESSING.NMS_CONFIG.NMS_TYPE: nms_gpu
2022-05-11 08:25:33,519   INFO  cfg.MODEL.POST_PROCESSING.NMS_CONFIG.NMS_THRESH: 0.01
2022-05-11 08:25:33,519   INFO  cfg.MODEL.POST_PROCESSING.NMS_CONFIG.NMS_PRE_MAXSIZE: 4096
2022-05-11 08:25:33,519   INFO  cfg.MODEL.POST_PROCESSING.NMS_CONFIG.NMS_POST_MAXSIZE: 500
2022-05-11 08:25:33,519   INFO  
cfg.OPTIMIZATION = edict()
2022-05-11 08:25:33,520   INFO  cfg.OPTIMIZATION.BATCH_SIZE_PER_GPU: 6
2022-05-11 08:25:33,520   INFO  cfg.OPTIMIZATION.NUM_EPOCHS: 80
2022-05-11 08:25:33,520   INFO  cfg.OPTIMIZATION.OPTIMIZER: adam_onecycle
2022-05-11 08:25:33,520   INFO  cfg.OPTIMIZATION.LR: 6e-06
2022-05-11 08:25:33,520   INFO  cfg.OPTIMIZATION.WEIGHT_DECAY: 0.01
2022-05-11 08:25:33,520   INFO  cfg.OPTIMIZATION.MOMENTUM: 0.9
2022-05-11 08:25:33,520   INFO  cfg.OPTIMIZATION.MOMS: [0.95, 0.99]
2022-05-11 08:25:33,520   INFO  cfg.OPTIMIZATION.PCT_START: 0.4
2022-05-11 08:25:33,520   INFO  cfg.OPTIMIZATION.DIV_FACTOR: 10
2022-05-11 08:25:33,520   INFO  cfg.OPTIMIZATION.DECAY_STEP_LIST: [35, 45]
2022-05-11 08:25:33,520   INFO  cfg.OPTIMIZATION.LR_DECAY: 0.1
2022-05-11 08:25:33,520   INFO  cfg.OPTIMIZATION.LR_CLIP: 1e-07
2022-05-11 08:25:33,521   INFO  cfg.OPTIMIZATION.LR_WARMUP: False
2022-05-11 08:25:33,521   INFO  cfg.OPTIMIZATION.WARMUP_EPOCH: 1
2022-05-11 08:25:33,521   INFO  cfg.OPTIMIZATION.GRAD_NORM_CLIP: 35
2022-05-11 08:25:33,521   INFO  cfg.find_unused_parameters: True
2022-05-11 08:25:33,521   INFO  cfg.TAG: MVXNet_PGD
2022-05-11 08:25:33,521   INFO  cfg.EXP_GROUP_PATH: cfgs/kitti_models
2022-05-11 08:25:33,602   INFO  Loading KITTI dataset
2022-05-11 08:25:33,780   INFO  Total samples for KITTI dataset: 3712
2022-05-11 08:25:39,031   INFO  DistributedDataParallel(
  (module): MVXNet_PGD(
    (imgextraction): ImgExtraction(
      (model): ResNet(
        (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
        (layer1): ResLayer(
          (0): Bottleneck(
            (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (downsample): Sequential(
              (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
          )
        )
        (layer2): ResLayer(
          (0): Bottleneck(
            (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (downsample): Sequential(
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
          )
        )
        (layer3): ResLayer(
          (0): Bottleneck(
            (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (downsample): Sequential(
              (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
          )
          (4): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
          )
          (5): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
          )
        )
        (layer4): ResLayer(
          (0): Bottleneck(
            (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (downsample): Sequential(
              (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
          )
        )
      )
      init_cfg={'type': 'Pretrained', 'checkpoint': '/mnt/sda1/kypark/fusion_openpcdet/ckpt/resnet.pth'}
      (neck): FPN(
        (lateral_convs): ModuleList(
          (0): ConvModule(
            (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
          )
          (1): ConvModule(
            (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          )
          (2): ConvModule(
            (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          )
          (3): ConvModule(
            (conv): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          )
        )
        (fpn_convs): ModuleList(
          (0): ConvModule(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (1): ConvModule(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (2): ConvModule(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (3): ConvModule(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
      )
      init_cfg={'type': 'Pretrained', 'checkpoint': '/mnt/sda1/kypark/fusion_openpcdet/ckpt/fpn.pth'}
    )
    (vfe): DynamicVFE(
      (voxelization): Voxelization(voxel_size=[0.05, 0.05, 0.1], point_cloud_range=[  0.  -40.   -3.   70.4  40.    1. ], max_num_points=-1, max_voxels=(-1, -1), deterministic=True)
      (cluster_scatter): DynamicScatter(voxel_size=[0.05, 0.05, 0.1], point_cloud_range=[  0.  -40.   -3.   70.4  40.    1. ], average_points=True)
      (vfe_layers): ModuleList(
        (0): Sequential(
          (0): Linear(in_features=10, out_features=64, bias=False)
          (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (1): Sequential(
          (0): Linear(in_features=128, out_features=64, bias=False)
          (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
      )
      (vfe_scatter): DynamicScatter(voxel_size=[0.05, 0.05, 0.1], point_cloud_range=[  0.  -40.   -3.   70.4  40.    1. ], average_points=False)
      (fusion_layer): PointFusion(
        (lateral_convs): ModuleList(
          (0): ConvModule(
            (conv): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (1): ConvModule(
            (conv): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (2): ConvModule(
            (conv): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (3): ConvModule(
            (conv): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (4): ConvModule(
            (conv): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (img_transform): Sequential(
          (0): Linear(in_features=640, out_features=128, bias=True)
          (1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        )
        (pts_transform): Sequential(
          (0): Linear(in_features=64, out_features=128, bias=True)
          (1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        )
      )
    )
    (backbone_3d): VoxelBackBone8x(
      (conv_input): SparseSequential(
        (0): SubMConv3d(128, 16, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
        (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
      (conv1): SparseSequential(
        (0): SparseSequential(
          (0): SubMConv3d(16, 16, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU()
        )
      )
      (conv2): SparseSequential(
        (0): SparseSequential(
          (0): SparseConv3d(16, 32, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (1): SparseSequential(
          (0): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (2): SparseSequential(
          (0): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU()
        )
      )
      (conv3): SparseSequential(
        (0): SparseSequential(
          (0): SparseConv3d(32, 64, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (1): SparseSequential(
          (0): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (2): SparseSequential(
          (0): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU()
        )
      )
      (conv4): SparseSequential(
        (0): SparseSequential(
          (0): SparseConv3d(64, 64, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[0, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (1): SparseSequential(
          (0): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (2): SparseSequential(
          (0): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU()
        )
      )
      (conv_out): SparseSequential(
        (0): SparseConv3d(64, 128, kernel_size=[3, 1, 1], stride=[2, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
        (1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
    )
    (map_to_bev_module): HeightCompression()
    (pfe): None
    (backbone_2d): BaseBEVBackbone(
      (blocks): ModuleList(
        (0): Sequential(
          (0): ZeroPad2d(padding=(1, 1, 1, 1), value=0.0)
          (1): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), bias=False)
          (2): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (3): ReLU()
          (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (5): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (6): ReLU()
          (7): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (8): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (9): ReLU()
          (10): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (11): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (12): ReLU()
          (13): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (14): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (15): ReLU()
          (16): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (17): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (18): ReLU()
        )
        (1): Sequential(
          (0): ZeroPad2d(padding=(1, 1, 1, 1), value=0.0)
          (1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (2): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (3): ReLU()
          (4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (5): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (6): ReLU()
          (7): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (8): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (9): ReLU()
          (10): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (11): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (12): ReLU()
          (13): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (14): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (15): ReLU()
          (16): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (17): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (18): ReLU()
        )
      )
      (deblocks): ModuleList(
        (0): Sequential(
          (0): ConvTranspose2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (1): Sequential(
          (0): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2), bias=False)
          (1): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU()
        )
      )
    )
    (dense_head): AnchorHeadSingle(
      (cls_loss_func): SigmoidFocalClassificationLoss()
      (reg_loss_func): WeightedSmoothL1Loss()
      (dir_loss_func): WeightedCrossEntropyLoss()
      (conv_cls): Conv2d(512, 18, kernel_size=(1, 1), stride=(1, 1))
      (conv_box): Conv2d(512, 42, kernel_size=(1, 1), stride=(1, 1))
      (conv_dir_cls): Conv2d(512, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (point_head): None
    (roi_head): None
    (dense_head_3d): MMDet3DHead(
      (bbox_head): PGDHead(
        (loss_cls): FocalLoss()
        (loss_bbox): SmoothL1Loss()
        (loss_dir): CrossEntropyLoss()
        (cls_convs): ModuleList(
          (0): ConvModule(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (gn): GroupNorm(32, 256, eps=1e-05, affine=True)
            (activate): ReLU(inplace=True)
          )
          (1): ConvModule(
            (conv): ModulatedDeformConv2dPack(
              (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
            (gn): GroupNorm(32, 256, eps=1e-05, affine=True)
            (activate): ReLU(inplace=True)
          )
        )
        (reg_convs): ModuleList(
          (0): ConvModule(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (gn): GroupNorm(32, 256, eps=1e-05, affine=True)
            (activate): ReLU(inplace=True)
          )
          (1): ConvModule(
            (conv): ModulatedDeformConv2dPack(
              (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
            (gn): GroupNorm(32, 256, eps=1e-05, affine=True)
            (activate): ReLU(inplace=True)
          )
        )
        (conv_cls_prev): ModuleList(
          (0): ConvModule(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (gn): GroupNorm(32, 256, eps=1e-05, affine=True)
            (activate): ReLU(inplace=True)
          )
        )
        (conv_cls): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
        (conv_reg_prevs): ModuleList(
          (0): ModuleList(
            (0): ConvModule(
              (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (gn): GroupNorm(32, 256, eps=1e-05, affine=True)
              (activate): ReLU(inplace=True)
            )
          )
          (1): ModuleList(
            (0): ConvModule(
              (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (gn): GroupNorm(32, 256, eps=1e-05, affine=True)
              (activate): ReLU(inplace=True)
            )
          )
          (2): ModuleList(
            (0): ConvModule(
              (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (gn): GroupNorm(32, 256, eps=1e-05, affine=True)
              (activate): ReLU(inplace=True)
            )
          )
          (3): ModuleList(
            (0): ConvModule(
              (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (gn): GroupNorm(32, 256, eps=1e-05, affine=True)
              (activate): ReLU(inplace=True)
            )
          )
          (4): ModuleList(
            (0): ConvModule(
              (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (gn): GroupNorm(32, 256, eps=1e-05, affine=True)
              (activate): ReLU(inplace=True)
            )
          )
          (5): ModuleList(
            (0): ConvModule(
              (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (gn): GroupNorm(32, 256, eps=1e-05, affine=True)
              (activate): ReLU(inplace=True)
            )
          )
        )
        (conv_regs): ModuleList(
          (0): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
          (1): Conv2d(256, 1, kernel_size=(1, 1), stride=(1, 1))
          (2): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
          (3): Conv2d(256, 1, kernel_size=(1, 1), stride=(1, 1))
          (4): Conv2d(256, 16, kernel_size=(1, 1), stride=(1, 1))
          (5): Conv2d(256, 4, kernel_size=(1, 1), stride=(1, 1))
        )
        (conv_dir_cls_prev): ModuleList(
          (0): ConvModule(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (gn): GroupNorm(32, 256, eps=1e-05, affine=True)
            (activate): ReLU(inplace=True)
          )
        )
        (conv_dir_cls): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
        (conv_depth_cls_prev): ModuleList(
          (0): ConvModule(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (gn): GroupNorm(32, 256, eps=1e-05, affine=True)
            (activate): ReLU(inplace=True)
          )
        )
        (conv_depth_cls): Conv2d(256, 8, kernel_size=(1, 1), stride=(1, 1))
        (conv_weight_prevs): ModuleList(
          (0): ModuleList(
            (0): ConvModule(
              (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (gn): GroupNorm(32, 256, eps=1e-05, affine=True)
              (activate): ReLU(inplace=True)
            )
          )
        )
        (conv_weights): ModuleList(
          (0): Conv2d(256, 1, kernel_size=(1, 1), stride=(1, 1))
        )
        (conv_centerness_prev): ModuleList(
          (0): ConvModule(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (gn): GroupNorm(32, 256, eps=1e-05, affine=True)
            (activate): ReLU(inplace=True)
          )
        )
        (conv_centerness): Conv2d(256, 1, kernel_size=(1, 1), stride=(1, 1))
        (scales): ModuleList(
          (0): ModuleList(
            (0): Scale()
            (1): Scale()
            (2): Scale()
            (3): Scale()
            (4): Scale()
          )
          (1): ModuleList(
            (0): Scale()
            (1): Scale()
            (2): Scale()
            (3): Scale()
            (4): Scale()
          )
          (2): ModuleList(
            (0): Scale()
            (1): Scale()
            (2): Scale()
            (3): Scale()
            (4): Scale()
          )
          (3): ModuleList(
            (0): Scale()
            (1): Scale()
            (2): Scale()
            (3): Scale()
            (4): Scale()
          )
        )
        (loss_centerness): CrossEntropyLoss()
        (loss_depth): UncertainSmoothL1Loss()
        (loss_bbox2d): SmoothL1Loss()
        (loss_consistency): GIoULoss()
      )
    )
  )
)
2022-05-11 08:25:39,042   INFO  **********************Start training cfgs/kitti_models/MVXNet_PGD(default)**********************
2022-05-12 01:17:01,284   INFO  **********************End training cfgs/kitti_models/MVXNet_PGD(default)**********************



2022-05-12 01:17:01,296   INFO  **********************Start evaluation cfgs/kitti_models/MVXNet_PGD(default)**********************
2022-05-12 01:17:01,298   INFO  Loading KITTI dataset
2022-05-12 01:17:01,475   INFO  Total samples for KITTI dataset: 3769
2022-05-12 01:17:01,479   INFO  ==> Loading parameters from checkpoint /mnt/sda1/kypark/fusion_openpcdet/output/cfgs/kitti_models/MVXNet_PGD/default/ckpt/checkpoint_epoch_80.pth to CPU
2022-05-12 01:17:01,844   INFO  ==> Checkpoint trained from version: pcdet+0.5.2+2bda951+py1b5a66f
2022-05-12 01:17:01,980   INFO  ==> Done (loaded 640/640)
2022-05-12 01:17:01,992   INFO  *************** EPOCH 80 EVALUATION *****************
2022-05-12 01:21:26,986   INFO  *************** Performance of EPOCH 80 *****************
2022-05-12 01:21:26,987   INFO  Generate label finished(sec_per_example: 0.0703 second).
2022-05-12 01:21:26,987   INFO  recall_roi_0.3: 0.000000
2022-05-12 01:21:26,987   INFO  recall_rcnn_0.3: 0.876538
2022-05-12 01:21:26,987   INFO  recall_roi_0.5: 0.000000
2022-05-12 01:21:26,987   INFO  recall_rcnn_0.5: 0.773576
2022-05-12 01:21:26,987   INFO  recall_roi_0.7: 0.000000
2022-05-12 01:21:26,987   INFO  recall_rcnn_0.7: 0.435023
2022-05-12 01:21:26,990   INFO  Average predicted number of objects(3769 samples): 11.046
2022-05-12 01:22:25,043   INFO  Car AP@0.70, 0.70, 0.70:
bbox AP:89.8514, 79.5088, 77.9664
bev  AP:86.0744, 75.7284, 68.3146
3d   AP:72.3632, 56.4511, 52.0248
aos  AP:88.66, 77.94, 75.86
Car AP_R40@0.70, 0.70, 0.70:
bbox AP:94.3216, 82.7480, 79.4476
bev  AP:87.4954, 75.7017, 70.3848
3d   AP:71.9476, 56.8499, 51.2678
aos  AP:92.94, 80.92, 77.10
Car AP@0.70, 0.50, 0.50:
bbox AP:89.8514, 79.5088, 77.9664
bev  AP:90.4662, 88.1618, 86.0797
3d   AP:90.3987, 87.3093, 83.5842
aos  AP:88.66, 77.94, 75.86
Car AP_R40@0.70, 0.50, 0.50:
bbox AP:94.3216, 82.7480, 79.4476
bev  AP:95.0537, 90.4436, 87.5327
3d   AP:94.8944, 88.3052, 85.0616
aos  AP:92.94, 80.92, 77.10
Pedestrian AP@0.50, 0.50, 0.50:
bbox AP:49.3210, 44.7146, 40.7679
bev  AP:42.6132, 38.7531, 35.4092
3d   AP:31.0541, 29.2195, 27.0624
aos  AP:26.76, 24.20, 21.83
Pedestrian AP_R40@0.50, 0.50, 0.50:
bbox AP:48.0884, 43.7870, 39.7447
bev  AP:39.8372, 35.9921, 32.7065
3d   AP:27.2535, 24.8893, 22.5540
aos  AP:26.09, 23.55, 21.08
Pedestrian AP@0.50, 0.25, 0.25:
bbox AP:49.3210, 44.7146, 40.7679
bev  AP:59.9468, 56.7599, 51.4898
3d   AP:59.7285, 56.3038, 51.0642
aos  AP:26.76, 24.20, 21.83
Pedestrian AP_R40@0.50, 0.25, 0.25:
bbox AP:48.0884, 43.7870, 39.7447
bev  AP:60.2601, 56.0794, 50.6163
3d   AP:59.9534, 55.6301, 50.1320
aos  AP:26.09, 23.55, 21.08
Cyclist AP@0.50, 0.50, 0.50:
bbox AP:28.9007, 22.2495, 21.8624
bev  AP:26.2710, 20.3238, 20.1033
3d   AP:24.6408, 18.1796, 17.9407
aos  AP:19.11, 16.25, 16.04
Cyclist AP_R40@0.50, 0.50, 0.50:
bbox AP:24.4799, 17.2550, 17.0806
bev  AP:22.9129, 15.4398, 14.9333
3d   AP:20.2393, 13.2982, 12.2854
aos  AP:13.03, 9.72, 9.52
Cyclist AP@0.50, 0.25, 0.25:
bbox AP:28.9007, 22.2495, 21.8624
bev  AP:30.1384, 22.5782, 22.1637
3d   AP:30.1384, 22.5319, 22.0827
aos  AP:19.11, 16.25, 16.04
Cyclist AP_R40@0.50, 0.25, 0.25:
bbox AP:24.4799, 17.2550, 17.0806
bev  AP:26.0652, 18.1047, 17.7393
3d   AP:26.0652, 18.0808, 17.2797
aos  AP:13.03, 9.72, 9.52

2022-05-12 01:22:25,051   INFO  Result is save to /mnt/sda1/kypark/fusion_openpcdet/output/cfgs/kitti_models/MVXNet_PGD/default/eval/eval_with_train/epoch_80/val
2022-05-12 01:22:25,051   INFO  ****************Evaluation done.*****************
2022-05-12 01:22:25,095   INFO  Epoch 80 has been evaluated
2022-05-12 01:22:55,131   INFO  **********************End evaluation cfgs/kitti_models/MVXNet_PGD(default)**********************
